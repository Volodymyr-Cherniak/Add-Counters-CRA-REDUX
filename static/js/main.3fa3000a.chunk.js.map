{"version":3,"sources":["redux/reducer.js","redux/store.js","redux/actions.js","Components/TotalCounters.js","Components/CounterItem.js","Components/AddCounter.js","Components/ConfirmDeleteCounter.js","Components/MainCounters.js","Components/App.js","serviceWorker.js","index.js"],"names":["initialState","counters","id","name","value","counterDeleteConfirmation","state","action","type","map","el","payload","filter","Math","random","newCounterName","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","addCounter","args","connect","dispatch","countersResetAllValue","props","totalCountersValue","reduce","acc","cur","className","onClick","counterDecrementValue","counterIncrementValue","counterResetValue","console","log","saveNewCounterName","counter","useState","setNewCounterName","editState","setEditState","autoFocus","onChange","e","target","setName","setValue","placeholder","resetCounterDeleteConfirmation","counterDeleteValue","counterName","toggle","Modal","isOpen","ModalHeader","ModalBody","ModalFooter","Button","outline","color","disabled","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3fa3000a.chunk.js","sourcesContent":["const initialState = {\n  counters: [\n    {id: 1, name: 'Counter1', value: 26},\n    {id: 2, name: 'Counter2', value: 18},\n    {id: 3, name: 'Counter3', value: 71}\n  ],\n  counterDeleteConfirmation: {}\n};\n\nconst counters = (state = initialState, action) => {\n  switch (action.type) {\n    case 'RESET_ALL_VALUE':\n      return ({\n        ...state,\n        counters: state.counters.map(el => ({...el, value: 0}))\n      });\n\n    case 'COUNTER_DECREMENT_VALUE':\n      return ({\n        ...state,\n        counters: state.counters.map(el => {\n          if (action.payload === el.id) return {...el, value: el.value - 1};\n          return el;\n        })\n      });\n\n    case 'COUNTER_INCREMENT_VALUE':\n      return ({\n        ...state,\n        counters: state.counters.map(el => {\n          if (action.payload === el.id) return {...el, value: el.value + 1};\n          return el;\n        })\n      });\n\n    case 'COUNTER_RESET_VALUE':\n      return ({\n        ...state,\n        counters: state.counters.map(el => {\n          if (action.payload === el.id) return {...el, value: 0};\n          return el;\n        })\n      });\n\n    case 'COUNTER_DELETE_VALUE':\n      return ({\n        ...state,\n        counters: state.counters.filter(el => el.id !== action.payload)\n      });\n\n    case 'ADD_COUNTER':\n      return ({\n        ...state,\n        counters: [\n          ...state.counters,\n          {\n            id: Math.random(),\n            name: action.payload.name,\n            value: action.payload.value\n          }\n        ]\n      });\n\n    case 'COUNTER_DELETE_CONFIRMATION':\n      return ({\n        ...state,\n        counterDeleteConfirmation: state.counters.filter(el => el.id === action.payload)[0]\n      });\n\n    case 'RESET_COUNTER_DELETE_CONFIRMATION':\n      return ({\n        ...state,\n        counterDeleteConfirmation: {}\n      });\n\n    case 'SAVE_NEW_COUNTER_NAME':\n      return ({\n        ...state,\n        counters: state.counters.map(el => {\n          if (action.payload.id === el.id) return {...el, name: action.payload.newCounterName};\n          return el;\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default counters;\n","import {applyMiddleware, createStore} from 'redux';\nimport thunk from \"redux-thunk\";\nimport reducer from './reducer';\nimport {composeWithDevTools} from 'redux-devtools-extension';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","export function countersResetAllValue() {\n  return {type: 'RESET_ALL_VALUE'}\n}\n\nexport function counterDecrementValue(id) {\n  return {type: 'COUNTER_DECREMENT_VALUE', payload: id}\n}\n\nexport function counterIncrementValue(id) {\n  return {type: 'COUNTER_INCREMENT_VALUE', payload: id}\n}\n\nexport function counterResetValue(id) {\n  return {type: 'COUNTER_RESET_VALUE', payload: id}\n}\n\nexport function counterDeleteValue(id) {\n  return {type: 'COUNTER_DELETE_VALUE', payload: id}\n}\n\nexport function addCounter(args) {\n  return {type: 'ADD_COUNTER', payload: args}\n}\n\nexport function counterDeleteConfirmation(id) {\n  console.log('payloadId--', id);\n  return {\n    type: 'COUNTER_DELETE_CONFIRMATION',\n    payload: id\n  }\n}\n\nexport function resetCounterDeleteConfirmation() {\n  return {type: 'RESET_COUNTER_DELETE_CONFIRMATION'}\n}\n\nexport function saveNewCounterName(args) {\n  return {type: 'SAVE_NEW_COUNTER_NAME', payload: args}\n}\n\n\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {countersResetAllValue} from \"../redux/actions\";\n\nfunction TotalCounters(props) {\n\n  const totalCountersValue = props.counters.reduce((acc, cur) => acc + cur.value, 0);\n\n  return (\n    <div className='card mb-2 mainColor'>\n      <div className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"col text-center\">\n            <h4 className='d-inline-block'>Total</h4>\n          </div>\n          <div className=\"col text-center\">\n            <h5 className='d-inline-block'>{totalCountersValue}</h5>\n          </div>\n          <div className=\"col text-center\">\n            <button onClick={props.countersResetAllValue} className='btn btn-warning'>Reset All</button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  );\n}\n\nconst mapStateToProps = state => ({\n  counters: state.counters\n});\n\nconst mapDispatchToProps = dispatch => ({\n  countersResetAllValue: () => dispatch(countersResetAllValue())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TotalCounters);\n","import React, {useState} from 'react';\nimport '../App.css';\nimport {connect} from \"react-redux\";\nimport {\n  counterDecrementValue,\n  counterIncrementValue,\n  counterResetValue,\n  counterDeleteConfirmation,\n  saveNewCounterName\n} from \"../redux/actions\";\n\n\nfunction CounterItem(props) {\n\n  const {name, value, id} = props.counter;\n\n  const [newCounterName, setNewCounterName] = useState(name);\n  const [editState, setEditState] = useState(true);\n\n\n  const saveNewCounterName = () => {\n    setEditState(!editState);\n    props.saveNewCounterName({id, newCounterName});\n  };\n\n  return (\n    <div className='card mb-2 mainColor'>\n      <div className='card-body'>\n        <div className='row'>\n          <div className='col text-center'>\n            {editState && <span>{name}</span>}\n            {!editState && <input type='text'\n                                  className=\"form-control\"\n                                  value={newCounterName}\n                                  autoFocus\n                                  onChange={(e) => setNewCounterName(e.target.value)}\n            />}\n\n          </div>\n          <div className='col text-center '>\n            <button className='btn btn-outline-secondary' onClick={() => props.counterDecrementValue(id)}>-</button>\n            <span className='m-3'>{value}</span>\n            <button className='btn btn-outline-secondary' onClick={() => props.counterIncrementValue(id)}>+</button>\n          </div>\n          <div className='col text-center'>\n            <button className='btn btn-outline-primary mr-2' onClick={() => props.counterResetValue(id)}>Reset</button>\n            {\n              editState && <button className='btn btn-outline-warning mr-2'\n                                   onClick={()=>setEditState(!editState)}\n              >Edit</button>\n            }\n            {\n              !editState && <button className='btn btn-outline-warning mr-2'\n                                   onClick={() => saveNewCounterName({id, newCounterName})}\n              >Save</button>\n            }\n\n            <button className='btn btn-outline-danger'\n                    onClick={() => props.counterDeleteConfirmation(id)}\n            >Delete\n            </button>\n\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  counters: state.counters\n});\n\nconst mapDispatchToProps = dispatch => ({\n  counterDecrementValue: (id) => dispatch(counterDecrementValue(id)),\n  counterIncrementValue: (id) => dispatch(counterIncrementValue(id)),\n  counterResetValue: (id) => dispatch(counterResetValue(id)),\n  counterDeleteConfirmation: (id) => dispatch(counterDeleteConfirmation(id)),\n  saveNewCounterName: (args) => dispatch(saveNewCounterName(args))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CounterItem);\n","import React, {useState} from \"react\";\nimport {connect} from 'react-redux';\nimport {addCounter} from '../redux/actions';\n\nconst AddCounter = (props) => {\n\n  const [name, setName] = useState('');\n  const [value, setValue] = useState('');\n\n  const addCounter = (args) => {\n    if(name && value) {\n      props.addCounter(args);\n      setValue('');\n      setName('');\n    }\n  };\n\n  return (\n    <div className='card mb-2 mainColor'>\n      <div className='card-body'>\n        <div className='row'>\n          <div className=\"input-group ml-5 mr-5\">\n            <input type=\"text\"\n                   className=\"form-control\"\n                   placeholder='Add Name'\n                   value={name}\n                   onChange={e => setName(e.target.value)}\n            />\n            <input type=\"number\"\n                   className=\"form-control\"\n                   placeholder='Add Value'\n                   value={value}\n                   onChange={e => setValue(e.target.value)}\n            />\n            <div className=\"input-group-append\">\n              <button className=\"btn btn-outline-secondary pl-4 pr-4\"\n                      onClick={() => addCounter({name, value})}\n              >Add Counter</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n\n};\n\nconst mapDispatchToProps = dispatch => ({\n  addCounter: (args) => dispatch(addCounter(args)),\n});\n\nexport default connect(null, mapDispatchToProps)(AddCounter)\n","import React, {useState} from \"react\";\nimport {connect} from 'react-redux';\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\nimport {addCounter, counterDeleteValue, resetCounterDeleteConfirmation} from \"../redux/actions\";\n\nconst ConfirmDeleteCounter = (props) => {\n\n  const [name, setName] = useState('');\n\n  const counterName = props.counterDeleteConfirmation.name || '';\n\n  const counterDelete = () => {\n    props.counterDeleteValue(props.counterDeleteConfirmation.id);\n    props.resetCounterDeleteConfirmation();\n    setName('');\n  };\n  const toggle = () => {\n    props.resetCounterDeleteConfirmation();\n  };\n\n\n\n  return (\n    <div>\n      <Modal isOpen={!!counterName} toggle={toggle} className='className'>\n        <ModalHeader toggle={toggle}>\n          Type\n          <strong>\n            {` ${counterName} `}\n          </strong>\n          to delete\n        </ModalHeader>\n        <ModalBody>\n          <input type='text'\n                 className=\"form-control\"\n                 placeholder='Type here'\n                 value={name}\n                 onChange={e => setName(e.target.value)}\n          />\n        </ModalBody>\n        <ModalFooter>\n          <Button outline color=\"danger\"\n                  onClick={counterDelete}\n                  disabled={name !== counterName}\n          >Delete</Button>{' '}\n          <Button outline color=\"secondary\" onClick={toggle}>Cancel</Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  )\n};\n\nconst mapStateToProps = state => ({\n  counterDeleteConfirmation: state.counterDeleteConfirmation,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addCounter: (args) => dispatch(addCounter(args)),\n  resetCounterDeleteConfirmation: () => dispatch(resetCounterDeleteConfirmation()),\n  counterDeleteValue: (id) => dispatch(counterDeleteValue(id)),\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmDeleteCounter)\n","import React from 'react';\nimport '../App.css';\nimport {connect} from \"react-redux\";\nimport TotalCounters from \"./TotalCounters\";\nimport CounterItem from \"./CounterItem\";\nimport AddCounter from \"./AddCounter\";\nimport ConfirmDeleteCounter from \"./ConfirmDeleteCounter\";\n\n\n\nfunction MainCounters(props) {\n  return (\n    <div>\n      <TotalCounters/>\n      {\n        props.counters.map(el => <CounterItem key={el.id}\n                                              counter={el}\n        />)\n      }\n      <AddCounter/>\n      <ConfirmDeleteCounter/>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  counters: state.counters\n});\n\nexport default connect(mapStateToProps)(MainCounters);\n","import React from 'react';\nimport '../App.css';\nimport MainCounters from \"./MainCounters\";\n\nfunction App() {\n  return (\n    <div className=\"container-md\">\n      <h2 className='text-center'>Counters</h2>\n      <MainCounters/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport {Provider} from 'react-redux';\nimport store from './redux/store'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}