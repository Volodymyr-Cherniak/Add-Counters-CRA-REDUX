{"version":3,"sources":["redux/reducer.js","redux/store.js","redux/actions.js","Components/TotalCounters.js","Components/CounterItem.js","Components/AddCounter.js","Components/ConfirmDeleteCounter.js","Components/MainCounters.js","Components/App.js","serviceWorker.js","index.js"],"names":["initialState","counters","id","name","value","counterDeleteConfirmation","state","action","type","map","el","payload","filter","Math","random","Number","newCounterName","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","addCounter","args","connect","dispatch","countersResetAllValue","props","totalCountersValue","reduce","acc","cur","className","onClick","counterDecrementValue","counterIncrementValue","counterResetValue","console","log","saveNewCounterName","counter","useState","setNewCounterName","editState","setEditState","autoFocus","onChange","e","target","setName","setValue","placeholder","resetCounterDeleteConfirmation","counterDeleteValue","counterName","toggle","Modal","isOpen","ModalHeader","ModalBody","ModalFooter","Button","outline","color","disabled","trim","toLocaleLowerCase","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f59af06d.chunk.js","sourcesContent":["const initialState = {\r\n  counters: [\r\n    {id: 1, name: 'Counter 1', value: 26},\r\n    {id: 2, name: 'Counter 2', value: 18},\r\n    {id: 3, name: 'Counter 3', value: 71}\r\n  ],\r\n  counterDeleteConfirmation: {}\r\n};\r\n\r\nconst counters = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'RESET_ALL_VALUE':\r\n      return ({\r\n        ...state,\r\n        counters: state.counters.map(el => ({...el, value: 0}))\r\n      });\r\n\r\n    case 'COUNTER_DECREMENT_VALUE':\r\n      return ({\r\n        ...state,\r\n        counters: state.counters.map(el => {\r\n          if (action.payload === el.id) return {...el, value: el.value - 1};\r\n          return el;\r\n        })\r\n      });\r\n\r\n    case 'COUNTER_INCREMENT_VALUE':\r\n      return ({\r\n        ...state,\r\n        counters: state.counters.map(el => {\r\n          if (action.payload === el.id) return {...el, value: el.value + 1};\r\n          return el;\r\n        })\r\n      });\r\n\r\n    case 'COUNTER_RESET_VALUE':\r\n      return ({\r\n        ...state,\r\n        counters: state.counters.map(el => {\r\n          if (action.payload === el.id) return {...el, value: 0};\r\n          return el;\r\n        })\r\n      });\r\n\r\n    case 'COUNTER_DELETE_VALUE':\r\n      return ({\r\n        ...state,\r\n        counters: state.counters.filter(el => el.id !== action.payload)\r\n      });\r\n\r\n    case 'ADD_COUNTER':\r\n      return ({\r\n        ...state,\r\n        counters: [\r\n          ...state.counters,\r\n          {\r\n            id: Math.random(),\r\n            name: action.payload.name,\r\n            value: Number(action.payload.value),\r\n          }\r\n        ]\r\n      });\r\n\r\n    case 'COUNTER_DELETE_CONFIRMATION':\r\n      return ({\r\n        ...state,\r\n        counterDeleteConfirmation: state.counters.filter(el => el.id === action.payload)[0]\r\n      });\r\n\r\n    case 'RESET_COUNTER_DELETE_CONFIRMATION':\r\n      return ({\r\n        ...state,\r\n        counterDeleteConfirmation: {}\r\n      });\r\n\r\n    case 'SAVE_NEW_COUNTER_NAME':\r\n      return ({\r\n        ...state,\r\n        counters: state.counters.map(el => {\r\n          if (action.payload.id === el.id) return {...el, name: action.payload.newCounterName};\r\n          return el;\r\n        })\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default counters;\r\n","import {applyMiddleware, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport reducer from './reducer';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","export function countersResetAllValue() {\r\n  return {type: 'RESET_ALL_VALUE'}\r\n}\r\n\r\nexport function counterDecrementValue(id) {\r\n  return {type: 'COUNTER_DECREMENT_VALUE', payload: id}\r\n}\r\n\r\nexport function counterIncrementValue(id) {\r\n  return {type: 'COUNTER_INCREMENT_VALUE', payload: id}\r\n}\r\n\r\nexport function counterResetValue(id) {\r\n  return {type: 'COUNTER_RESET_VALUE', payload: id}\r\n}\r\n\r\nexport function counterDeleteValue(id) {\r\n  return {type: 'COUNTER_DELETE_VALUE', payload: id}\r\n}\r\n\r\nexport function addCounter(args) {\r\n  return {type: 'ADD_COUNTER', payload: args}\r\n}\r\n\r\nexport function counterDeleteConfirmation(id) {\r\n  console.log('payloadId--', id);\r\n  return {\r\n    type: 'COUNTER_DELETE_CONFIRMATION',\r\n    payload: id\r\n  }\r\n}\r\n\r\nexport function resetCounterDeleteConfirmation() {\r\n  return {type: 'RESET_COUNTER_DELETE_CONFIRMATION'}\r\n}\r\n\r\nexport function saveNewCounterName(args) {\r\n  return {type: 'SAVE_NEW_COUNTER_NAME', payload: args}\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {countersResetAllValue} from \"../redux/actions\";\r\n\r\nfunction TotalCounters(props) {\r\n\r\n  const totalCountersValue = props.counters.reduce((acc, cur) => acc + cur.value, 0);\r\n\r\n  return (\r\n    <div className='card mainColor'>\r\n      <div className=\"card-body\">\r\n        <div className=\"row\">\r\n          <div className=\"col text-center\">\r\n            <h4 className='d-inline-block'>Total</h4>\r\n          </div>\r\n          <div className=\"col text-center\">\r\n            <h5 className='d-inline-block'>{totalCountersValue}</h5>\r\n          </div>\r\n          <div className=\"col text-center\">\r\n            <button onClick={props.countersResetAllValue} className='btn btn-warning'>Reset All</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  counters: state.counters\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  countersResetAllValue: () => dispatch(countersResetAllValue())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TotalCounters);\r\n","import React, {useState} from 'react';\r\nimport '../App.css';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n  counterDecrementValue,\r\n  counterIncrementValue,\r\n  counterResetValue,\r\n  counterDeleteConfirmation,\r\n  saveNewCounterName\r\n} from \"../redux/actions\";\r\n\r\n\r\nfunction CounterItem(props) {\r\n\r\n  const {name, value, id} = props.counter;\r\n\r\n  const [newCounterName, setNewCounterName] = useState(name);\r\n  const [editState, setEditState] = useState(true);\r\n\r\n\r\n  const saveNewCounterName = () => {\r\n    setEditState(!editState);\r\n    props.saveNewCounterName({id, newCounterName});\r\n  };\r\n\r\n  return (\r\n    <div className='card mainColor'>\r\n      <div className='card-body'>\r\n        <div className='row'>\r\n          <div className='col text-center'>\r\n            {editState && <span>{name}</span>}\r\n            {!editState && <input type='text'\r\n                                  className=\"form-control\"\r\n                                  value={newCounterName}\r\n                                  autoFocus\r\n                                  onChange={(e) => setNewCounterName(e.target.value)}\r\n            />}\r\n\r\n          </div>\r\n          <div className='col text-center d-inline-flex'>\r\n            <button className='btn btn-outline-secondary ml-auto' onClick={() => props.counterDecrementValue(id)}>-</button>\r\n            <span className=' m-auto'><strong>{+value}</strong></span>\r\n            <button className='btn btn-outline-secondary mr-auto' onClick={() => props.counterIncrementValue(id)}>+</button>\r\n          </div>\r\n          <div className='col center btn-group btn-group-toggle'>\r\n\r\n            { editState &&\r\n              <button className='btn btn-outline-primary' onClick={() => props.counterResetValue(id)}>Reset</button>\r\n            }\r\n            {editState &&\r\n            <button className='btn btn-outline-warning' onClick={() => setEditState(!editState)}>Edit</button>\r\n            }\r\n            {!editState &&\r\n            <button className='btn btn-outline-warning' onClick={() => saveNewCounterName({id, newCounterName})}>Save</button>\r\n            }\r\n\r\n            {editState && <button className='btn btn-outline-danger'\r\n                    onClick={() => props.counterDeleteConfirmation(id)}\r\n            >Delete\r\n            </button>}\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  counters: state.counters\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  counterDecrementValue: (id) => dispatch(counterDecrementValue(id)),\r\n  counterIncrementValue: (id) => dispatch(counterIncrementValue(id)),\r\n  counterResetValue: (id) => dispatch(counterResetValue(id)),\r\n  counterDeleteConfirmation: (id) => dispatch(counterDeleteConfirmation(id)),\r\n  saveNewCounterName: (args) => dispatch(saveNewCounterName(args))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CounterItem);\r\n","import React, {useState} from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport {addCounter} from '../redux/actions';\r\n\r\nconst AddCounter = (props) => {\r\n\r\n  const [name, setName] = useState('');\r\n  const [value, setValue] = useState('');\r\n\r\n  const addCounter = (args) => {\r\n    if(name && value) {\r\n      props.addCounter(args);\r\n      setValue('');\r\n      setName('');\r\n      console.log('VALUE', args)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='card mainColor'>\r\n      <div className='card-body'>\r\n        <div className='row mr-auto ml-auto'>\r\n          <div className=\"input-group ml-auto mr-auto\">\r\n            <input type=\"text\"\r\n                   className=\"form-control\"\r\n                   placeholder='Add Name'\r\n                   value={name}\r\n                   onChange={e => setName(e.target.value)}\r\n            />\r\n            <input type=\"number\"\r\n                   className=\"form-control\"\r\n                   placeholder='Add Value'\r\n                   value={value}\r\n                   onChange={e => setValue(e.target.value)}\r\n            />\r\n            <div className=\"input-group-append\">\r\n              <button className=\"btn btn-outline-secondary pl-4 pr-4\"\r\n                      onClick={() => addCounter({name, value})}\r\n              >Add Counter</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addCounter: (args) => dispatch(addCounter(args)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(AddCounter)\r\n","import React, {useState} from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\r\nimport {addCounter, counterDeleteValue, resetCounterDeleteConfirmation} from \"../redux/actions\";\r\n\r\nconst ConfirmDeleteCounter = (props) => {\r\n\r\n  const [name, setName] = useState('');\r\n\r\n  const counterName = props.counterDeleteConfirmation.name || '';\r\n\r\n  const counterDelete = () => {\r\n    props.counterDeleteValue(props.counterDeleteConfirmation.id);\r\n    props.resetCounterDeleteConfirmation();\r\n    setName('');\r\n  };\r\n  const toggle = () => {\r\n    props.resetCounterDeleteConfirmation();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal isOpen={!!counterName} toggle={toggle} className='className'>\r\n        <ModalHeader toggle={toggle}>\r\n          Type\r\n          <strong>\r\n            {` ${counterName} `}\r\n          </strong>\r\n          to delete\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <input type='text'\r\n                 className=\"form-control\"\r\n                 placeholder='Type here'\r\n                 value={name}\r\n                 onChange={e => setName(e.target.value)}\r\n          />\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button outline color=\"danger\"\r\n                  onClick={counterDelete}\r\n                  disabled={name.trim().toLocaleLowerCase() !== counterName.toLocaleLowerCase()}\r\n          >Delete</Button>\r\n          <Button outline color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  counterDeleteConfirmation: state.counterDeleteConfirmation,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addCounter: (args) => dispatch(addCounter(args)),\r\n  resetCounterDeleteConfirmation: () => dispatch(resetCounterDeleteConfirmation()),\r\n  counterDeleteValue: (id) => dispatch(counterDeleteValue(id)),\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmDeleteCounter)\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport {connect} from \"react-redux\";\r\nimport TotalCounters from \"./TotalCounters\";\r\nimport CounterItem from \"./CounterItem\";\r\nimport AddCounter from \"./AddCounter\";\r\nimport ConfirmDeleteCounter from \"./ConfirmDeleteCounter\";\r\n\r\n\r\nfunction MainCounters(props) {\r\n  return (\r\n    <div>\r\n      <TotalCounters/>\r\n      {\r\n        props.counters.map(el => <CounterItem key={el.id}\r\n                                              counter={el}\r\n        />)\r\n      }\r\n      <AddCounter/>\r\n      <ConfirmDeleteCounter/>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  counters: state.counters\r\n});\r\n\r\nexport default connect(mapStateToProps)(MainCounters);\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport MainCounters from \"./MainCounters\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container-md\">\r\n      <h2 className='text-center'>Counters</h2>\r\n      <MainCounters/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport store from './redux/store'\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport App from './Components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App/>\r\n  </Provider>\r\n  , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}